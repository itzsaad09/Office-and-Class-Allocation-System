/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.*;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author LENOVO
 */
public class UpdateClass extends javax.swing.JFrame {

    Connection connect = null;
    ResultSet result = null;
    PreparedStatement pst = null;
    
    boolean temp = true;
    
    String email;
    
    public UpdateClass() {
        initComponents();
        // Set Title
        this.setTitle("Office and Class Allocation System");
        // Database Connection
        connect = Database.getConnection();
    }

    public UpdateClass(String email) {
        initComponents();
        // Set Title
        this.setTitle("Office and Class Allocation System");
        // Database Connection
        connect = Database.getConnection();
        this.email = email;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UpdateClassPanel = new javax.swing.JPanel();
        Header = new javax.swing.JPanel();
        LogoutButton = new javax.swing.JButton();
        Field = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        UpdateClassForm = new javax.swing.JPanel();
        CourseCode = new javax.swing.JLabel();
        CourseCodeField = new javax.swing.JTextField();
        CreditHours = new javax.swing.JLabel();
        CreditHoursField = new javax.swing.JTextField();
        Course = new javax.swing.JLabel();
        CourseField = new javax.swing.JTextField();
        Department = new javax.swing.JComboBox<>();
        Program = new javax.swing.JLabel();
        ProgramField = new javax.swing.JTextField();
        Instructor = new javax.swing.JComboBox<>();
        AcademicYear = new javax.swing.JLabel();
        AcademicYearField = new javax.swing.JTextField();
        AcademicSession = new javax.swing.JComboBox<>();
        Seats = new javax.swing.JLabel();
        SeatsField = new javax.swing.JTextField();
        UpdateRecord = new javax.swing.JButton();
        Footer = new javax.swing.JPanel();
        DevelopedBy = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        UpdateClassPanel.setBackground(new java.awt.Color(54, 79, 107));
        UpdateClassPanel.setPreferredSize(new java.awt.Dimension(900, 500));

        Header.setBackground(new java.awt.Color(63, 193, 201));
        Header.setPreferredSize(new java.awt.Dimension(900, 86));

        LogoutButton.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        LogoutButton.setForeground(new java.awt.Color(54, 79, 107));
        LogoutButton.setText("Logout");
        LogoutButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LogoutButton.setPreferredSize(new java.awt.Dimension(90, 30));
        LogoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogoutButtonMouseClicked(evt);
            }
        });
        LogoutButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LogoutButtonKeyPressed(evt);
            }
        });

        Field.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Field.setForeground(new java.awt.Color(245, 245, 245));
        Field.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Field.setText("Admin");

        BackButton.setBackground(new java.awt.Color(54, 79, 107));
        BackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-back-32.png"))); // NOI18N
        BackButton.setBorder(null);
        BackButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BackButton.setPreferredSize(new java.awt.Dimension(35, 35));
        BackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackButtonMouseClicked(evt);
            }
        });
        BackButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BackButtonKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout HeaderLayout = new javax.swing.GroupLayout(Header);
        Header.setLayout(HeaderLayout);
        HeaderLayout.setHorizontalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderLayout.createSequentialGroup()
                .addGroup(HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HeaderLayout.createSequentialGroup()
                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LogoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(HeaderLayout.createSequentialGroup()
                        .addComponent(Field, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 728, Short.MAX_VALUE)))
                .addContainerGap())
        );
        HeaderLayout.setVerticalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderLayout.createSequentialGroup()
                .addGroup(HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HeaderLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(LogoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Field)
                .addContainerGap())
        );

        UpdateClassForm.setOpaque(false);
        UpdateClassForm.setPreferredSize(new java.awt.Dimension(470, 330));

        CourseCode.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        CourseCode.setForeground(new java.awt.Color(245, 245, 245));
        CourseCode.setText("Course Code");

        CourseCodeField.setForeground(new java.awt.Color(153, 153, 153));
        CourseCodeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        CourseCodeField.setText("Enter Course Code to Search");
        CourseCodeField.setPreferredSize(new java.awt.Dimension(64, 30));
        CourseCodeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CourseCodeFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CourseCodeFieldFocusLost(evt);
            }
        });
        CourseCodeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CourseCodeFieldKeyPressed(evt);
            }
        });

        CreditHours.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        CreditHours.setForeground(new java.awt.Color(245, 245, 245));
        CreditHours.setText("Credit Hours");

        CreditHoursField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        CreditHoursField.setMinimumSize(new java.awt.Dimension(64, 30));
        CreditHoursField.setPreferredSize(new java.awt.Dimension(64, 30));
        CreditHoursField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                CreditHoursFieldFocusLost(evt);
            }
        });

        Course.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        Course.setForeground(new java.awt.Color(245, 245, 245));
        Course.setText("Course");

        CourseField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        CourseField.setMinimumSize(new java.awt.Dimension(64, 30));
        CourseField.setPreferredSize(new java.awt.Dimension(64, 30));

        Department.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Department", "Department of Computer Science", "Department of English", "Department of Mathematics", "Department of Physics" }));
        Department.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Department.setPreferredSize(new java.awt.Dimension(64, 30));

        Program.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        Program.setForeground(new java.awt.Color(245, 245, 245));
        Program.setText("Program");

        ProgramField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        ProgramField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ProgramField.setPreferredSize(new java.awt.Dimension(64, 30));

        Instructor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Instructor" }));
        Instructor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Instructor.setPreferredSize(new java.awt.Dimension(64, 30));

        AcademicYear.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        AcademicYear.setForeground(new java.awt.Color(245, 245, 245));
        AcademicYear.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AcademicYear.setText("Academic Year");

        AcademicYearField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        AcademicYearField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        AcademicYearField.setPreferredSize(new java.awt.Dimension(64, 30));

        AcademicSession.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Academic Session", "Fall", "Spring", "Summer" }));
        AcademicSession.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AcademicSession.setPreferredSize(new java.awt.Dimension(64, 30));

        Seats.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        Seats.setForeground(new java.awt.Color(245, 245, 245));
        Seats.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Seats.setText("Seats");

        SeatsField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        SeatsField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        SeatsField.setPreferredSize(new java.awt.Dimension(64, 30));
        SeatsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                SeatsFieldFocusLost(evt);
            }
        });

        UpdateRecord.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        UpdateRecord.setForeground(new java.awt.Color(54, 79, 107));
        UpdateRecord.setText("Update Class");
        UpdateRecord.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        UpdateRecord.setPreferredSize(new java.awt.Dimension(90, 30));
        UpdateRecord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateRecordMouseClicked(evt);
            }
        });
        UpdateRecord.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UpdateRecordKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout UpdateClassFormLayout = new javax.swing.GroupLayout(UpdateClassForm);
        UpdateClassForm.setLayout(UpdateClassFormLayout);
        UpdateClassFormLayout.setHorizontalGroup(
            UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateClassFormLayout.createSequentialGroup()
                .addGroup(UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdateClassFormLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Course)
                            .addComponent(CourseCode)
                            .addGroup(UpdateClassFormLayout.createSequentialGroup()
                                .addGroup(UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CourseCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CreditHours)
                                    .addComponent(CreditHoursField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CourseField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(95, 95, 95)
                                .addGroup(UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Instructor, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Department, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ProgramField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Program))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                        .addGroup(UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AcademicYear)
                            .addComponent(AcademicYearField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AcademicSession, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Seats)
                            .addComponent(SeatsField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(UpdateClassFormLayout.createSequentialGroup()
                        .addGap(371, 371, 371)
                        .addComponent(UpdateRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
        );
        UpdateClassFormLayout.setVerticalGroup(
            UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateClassFormLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(UpdateClassFormLayout.createSequentialGroup()
                        .addGroup(UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(UpdateClassFormLayout.createSequentialGroup()
                                .addComponent(CourseCode)
                                .addGap(37, 37, 37))
                            .addComponent(CourseCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CreditHours)
                        .addGap(6, 6, 6)
                        .addComponent(CreditHoursField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(Course)
                        .addGap(6, 6, 6)
                        .addComponent(CourseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UpdateRecord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UpdateClassFormLayout.createSequentialGroup()
                        .addGroup(UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(UpdateClassFormLayout.createSequentialGroup()
                                .addComponent(AcademicYear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AcademicYearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Department, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Program)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ProgramField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(UpdateClassFormLayout.createSequentialGroup()
                                .addComponent(AcademicSession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Seats)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(UpdateClassFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Instructor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SeatsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(86, Short.MAX_VALUE))))
        );

        Footer.setBackground(new java.awt.Color(63, 193, 201));
        Footer.setPreferredSize(new java.awt.Dimension(0, 30));

        DevelopedBy.setEditable(false);
        DevelopedBy.setBackground(new java.awt.Color(63, 193, 201));
        DevelopedBy.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        DevelopedBy.setForeground(new java.awt.Color(255, 255, 255));
        DevelopedBy.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        DevelopedBy.setText("Developed By: Hafiz Muhammad Saad");
        DevelopedBy.setBorder(null);
        DevelopedBy.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        DevelopedBy.setFocusable(false);
        DevelopedBy.setHighlighter(null);

        javax.swing.GroupLayout FooterLayout = new javax.swing.GroupLayout(Footer);
        Footer.setLayout(FooterLayout);
        FooterLayout.setHorizontalGroup(
            FooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DevelopedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FooterLayout.setVerticalGroup(
            FooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FooterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(DevelopedBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout UpdateClassPanelLayout = new javax.swing.GroupLayout(UpdateClassPanel);
        UpdateClassPanel.setLayout(UpdateClassPanelLayout);
        UpdateClassPanelLayout.setHorizontalGroup(
            UpdateClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdateClassPanelLayout.createSequentialGroup()
                .addComponent(Header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(Footer, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdateClassPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UpdateClassForm, javax.swing.GroupLayout.PREFERRED_SIZE, 861, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        UpdateClassPanelLayout.setVerticalGroup(
            UpdateClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateClassPanelLayout.createSequentialGroup()
                .addComponent(Header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(UpdateClassForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(Footer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(UpdateClassPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(UpdateClassPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogoutButtonMouseClicked
        // TODO add your handling code here:
        HomePage homepage = new HomePage();
        homepage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_LogoutButtonMouseClicked

    private void LogoutButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LogoutButtonKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            HomePage homepage = new HomePage();
            homepage.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_LogoutButtonKeyPressed

    private void BackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseClicked
        // TODO add your handling code here:
        new ClassPage(email).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackButtonMouseClicked

    private void BackButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BackButtonKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            new ClassPage(email).setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_BackButtonKeyPressed

    private void CourseCodeFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CourseCodeFieldFocusGained
        // TODO add your handling code here:
        if (CourseCodeField.getText().trim().equals("Enter Course Code to Search")) {
            CourseCodeField.setText("");
            CourseCodeField.setForeground(new Color(153,153,153));
        }
        CourseCodeField.setForeground(Color.BLACK);
    }//GEN-LAST:event_CourseCodeFieldFocusGained

    private void CourseCodeFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CourseCodeFieldFocusLost
        // TODO add your handling code here:
        if (CourseCodeField.getText().trim().equals("")) {
            CourseCodeField.setText("Enter Course Code to Search");
            CourseCodeField.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_CourseCodeFieldFocusLost

    private void CreditHoursFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CreditHoursFieldFocusLost
        // TODO add your handling code here:
        String PATTERN = "^[1-4]{1}$";
        Pattern pattern = Pattern.compile(PATTERN);
        Matcher match = pattern.matcher(CreditHoursField.getText());
        if (!match.matches()) {
            CreditHours.setForeground(Color.RED);
            temp = false;
        } else {
            CreditHours.setForeground(Color.WHITE);
            temp = true;
        }
    }//GEN-LAST:event_CreditHoursFieldFocusLost

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        String query_instructor = "SELECT `email` FROM `instructor`";
        try {
            pst = connect.prepareStatement(query_instructor);
            result = pst.executeQuery(query_instructor);
            while (result.next()) {
                String item = result.getString("email");
                Instructor.addItem(item);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void CourseCodeFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CourseCodeFieldKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            String course_code = CourseCodeField.getText();
            try {
                String query = "SELECT * FROM `class` WHERE `course_code` = ?";
                pst = connect.prepareStatement(query);
                pst.setString(1, course_code);
                result = pst.executeQuery();
                if (result.next()) {
                    CreditHoursField.setText(result.getString(2));
                    CourseField.setText(result.getString(3));
                    Department.setSelectedItem(result.getString(4));
                    ProgramField.setText(result.getString(5));
                    Instructor.setSelectedItem(result.getString(6));
                    AcademicYearField.setText(result.getString(7));
                    AcademicSession.setSelectedItem(result.getString(8));
                    SeatsField.setText(result.getString(9));
                } else {
                    IDNotFound idnotfound = new IDNotFound();
                    idnotfound.setVisible(true);
                    new Timer().schedule(new TimerTask() {
                        public void run() {
                            idnotfound.dispose();
                        }
                    }, 1000);
                    
                    CourseCodeField.setText("");
                    CreditHoursField.setText("");
                    CourseField.setText("");
                    Department.setSelectedItem("Select Department");
                    ProgramField.setText("");
                    Instructor.setSelectedItem("Select Instructor");
                    AcademicYearField.setText("");
                    AcademicSession.setSelectedItem("Select Academic Session");
                    SeatsField.setText("");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }
    }//GEN-LAST:event_CourseCodeFieldKeyPressed

    private void SeatsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SeatsFieldFocusLost
        // TODO add your handling code here:
        String PATTERN = "^[0-9]{3}$";
        Pattern pattern = Pattern.compile(PATTERN);
        Matcher match = pattern.matcher(SeatsField.getText());
        if (!match.matches()) {
            Seats.setForeground(Color.RED);
            temp = false;
        } else {
            Seats.setForeground(Color.WHITE);
            temp = true;
        }
    }//GEN-LAST:event_SeatsFieldFocusLost

    private void UpdateRecordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateRecordMouseClicked
        // TODO add your handling code here:
        String course_code = CourseCodeField.getText();
        String credit_hours = CreditHoursField.getText();
        String course = CourseField.getText();
        String department = (String)Department.getSelectedItem();
        String program = ProgramField.getText();
        String instructor = (String)Instructor.getSelectedItem();
        String academic_year = AcademicYearField.getText();
        String academic_session = (String)AcademicSession.getSelectedItem();
        String seats = SeatsField.getText();
        
        if (course_code.equals("") || credit_hours.equals("") || course.equals("") || department.equals("Select Department") || program.equals("") || instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")){
            CourseCode.setForeground(Color.RED);
            CreditHours.setForeground(Color.RED);
            Course.setForeground(Color.RED);
            Department.setBackground(Color.RED);
            Program.setForeground(Color.RED);
            Instructor.setBackground(Color.RED);
            AcademicYear.setForeground(Color.RED);
            AcademicSession.setBackground(Color.RED);
            Seats.setForeground(Color.RED);
        } else if (credit_hours.equals("") || course.equals("") || department.equals("Select Department") || program.equals("") || instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
            CreditHours.setForeground(Color.RED);
            Course.setForeground(Color.RED);
            Department.setBackground(Color.RED);
            Program.setForeground(Color.RED);
            Instructor.setBackground(Color.RED);
            AcademicYear.setForeground(Color.RED);
            AcademicSession.setBackground(Color.RED);
            Seats.setForeground(Color.RED);
        } else if (course.equals("") || department.equals("Select Department") || program.equals("") || instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
            Course.setForeground(Color.RED);
            Department.setBackground(Color.RED);
            Program.setForeground(Color.RED);
            Instructor.setBackground(Color.RED);
            AcademicYear.setForeground(Color.RED);
            AcademicSession.setBackground(Color.RED);
            Seats.setForeground(Color.RED);
        } else if (department.equals("Select Department") || program.equals("") || instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
            Department.setBackground(Color.RED);
            Program.setForeground(Color.RED);
            Instructor.setBackground(Color.RED);
            AcademicYear.setForeground(Color.RED);
            AcademicSession.setBackground(Color.RED);
            Seats.setForeground(Color.RED);
        } else if (program.equals("") || instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
            Program.setForeground(Color.RED);
            Instructor.setBackground(Color.RED);
            AcademicYear.setForeground(Color.RED);
            AcademicSession.setBackground(Color.RED);
            Seats.setForeground(Color.RED);
        } else if (instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
            Instructor.setBackground(Color.RED);
            AcademicYear.setForeground(Color.RED);
            AcademicSession.setBackground(Color.RED);
            Seats.setForeground(Color.RED);
        } else if (academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
            AcademicYear.setForeground(Color.RED);
            AcademicSession.setBackground(Color.RED);
            Seats.setForeground(Color.RED);
        } else if (academic_session.equals("Select Academic Session") || seats.equals("")) {
            AcademicSession.setBackground(Color.RED);
            Seats.setForeground(Color.RED);
        } else if (seats.equals("")) {
            Seats.setForeground(Color.RED);
        } else {
            if (temp == true) {
                String query = "UPDATE `class` SET `course_code`='"+course_code+"',`credit_hours`='"+credit_hours+"',`course`='"+course+"',`department`='"+department+"',`program`='"+program+"',`instructor`='"+instructor+"',`academic_year`='"+academic_year+"',`academic_session`='"+academic_session+"',`seats`='"+seats+"' WHERE `course_code`='"+course_code+"'";
                try {
                    pst = connect.prepareStatement(query);

                    pst.execute();
                    UpdateSuccessful updatesuccessful = new UpdateSuccessful();
                    updatesuccessful.setVisible(true);
                    new Timer().schedule(new TimerTask() {
                        @Override
                        public void run() {
                            updatesuccessful.dispose();
                        }
                    }, 1000);

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null,ex);
                }
            } else {
                UpdateFailed updatefailed = new UpdateFailed();
                updatefailed.setVisible(true);
                new Timer().schedule(new TimerTask() {
                    public void run() {
                        updatefailed.dispose();
                    }
                }, 1000);
            }
        }
    }//GEN-LAST:event_UpdateRecordMouseClicked

    private void UpdateRecordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UpdateRecordKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
            String course_code = CourseCodeField.getText();
            String credit_hours = CreditHoursField.getText();
            String course = CourseField.getText();
            String department = (String)Department.getSelectedItem();
            String program = ProgramField.getText();
            String instructor = (String)Instructor.getSelectedItem();
            String academic_year = AcademicYearField.getText();
            String academic_session = (String)AcademicSession.getSelectedItem();
            String seats = SeatsField.getText();

            if (course_code.equals("") || credit_hours.equals("") || course.equals("") || department.equals("Select Department") || program.equals("") || instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")){
                CourseCode.setForeground(Color.RED);
                CreditHours.setForeground(Color.RED);
                Course.setForeground(Color.RED);
                Department.setBackground(Color.RED);
                Program.setForeground(Color.RED);
                Instructor.setBackground(Color.RED);
                AcademicYear.setForeground(Color.RED);
                AcademicSession.setBackground(Color.RED);
                Seats.setForeground(Color.RED);
            } else if (credit_hours.equals("") || course.equals("") || department.equals("Select Department") || program.equals("") || instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
                CreditHours.setForeground(Color.RED);
                Course.setForeground(Color.RED);
                Department.setBackground(Color.RED);
                Program.setForeground(Color.RED);
                Instructor.setBackground(Color.RED);
                AcademicYear.setForeground(Color.RED);
                AcademicSession.setBackground(Color.RED);
                Seats.setForeground(Color.RED);
            } else if (course.equals("") || department.equals("Select Department") || program.equals("") || instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
                Course.setForeground(Color.RED);
                Department.setBackground(Color.RED);
                Program.setForeground(Color.RED);
                Instructor.setBackground(Color.RED);
                AcademicYear.setForeground(Color.RED);
                AcademicSession.setBackground(Color.RED);
                Seats.setForeground(Color.RED);
            } else if (department.equals("Select Department") || program.equals("") || instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
                Department.setBackground(Color.RED);
                Program.setForeground(Color.RED);
                Instructor.setBackground(Color.RED);
                AcademicYear.setForeground(Color.RED);
                AcademicSession.setBackground(Color.RED);
                Seats.setForeground(Color.RED);
            } else if (program.equals("") || instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
                Program.setForeground(Color.RED);
                Instructor.setBackground(Color.RED);
                AcademicYear.setForeground(Color.RED);
                AcademicSession.setBackground(Color.RED);
                Seats.setForeground(Color.RED);
            } else if (instructor.equals("Select Instructor") || academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
                Instructor.setBackground(Color.RED);
                AcademicYear.setForeground(Color.RED);
                AcademicSession.setBackground(Color.RED);
                Seats.setForeground(Color.RED);
            } else if (academic_year.equals("") || academic_session.equals("Select Academic Session") || seats.equals("")) {
                AcademicYear.setForeground(Color.RED);
                AcademicSession.setBackground(Color.RED);
                Seats.setForeground(Color.RED);
            } else if (academic_session.equals("Select Academic Session") || seats.equals("")) {
                AcademicSession.setBackground(Color.RED);
                Seats.setForeground(Color.RED);
            } else if (seats.equals("")) {
                Seats.setForeground(Color.RED);
            } else {
                if (temp == true) {
                    String query = "UPDATE `class` SET `course_code`='"+course_code+"',`credit_hours`='"+credit_hours+"',`course`='"+course+"',`department`='"+department+"',`program`='"+program+"',`instructor`='"+instructor+"',`academic_year`='"+academic_year+"',`academic_session`='"+academic_session+"',`seats`='"+seats+"' WHERE `course_code`='"+course_code+"'";
                    try {
                        pst = connect.prepareStatement(query);

                        pst.execute();
                        UpdateSuccessful updatesuccessful = new UpdateSuccessful();
                        updatesuccessful.setVisible(true);
                        new Timer().schedule(new TimerTask() {
                            @Override
                            public void run() {
                                updatesuccessful.dispose();
                            }
                        }, 1000);

                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null,ex);
                    }
                } else {
                    UpdateFailed updatefailed = new UpdateFailed();
                    updatefailed.setVisible(true);
                    new Timer().schedule(new TimerTask() {
                        public void run() {
                            updatefailed.dispose();
                        }
                    }, 1000);
                }
            }
        }
    }//GEN-LAST:event_UpdateRecordKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateClass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AcademicSession;
    private javax.swing.JLabel AcademicYear;
    private javax.swing.JTextField AcademicYearField;
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel Course;
    private javax.swing.JLabel CourseCode;
    private javax.swing.JTextField CourseCodeField;
    private javax.swing.JTextField CourseField;
    private javax.swing.JLabel CreditHours;
    private javax.swing.JTextField CreditHoursField;
    private javax.swing.JComboBox<String> Department;
    private javax.swing.JTextField DevelopedBy;
    private javax.swing.JLabel Field;
    private javax.swing.JPanel Footer;
    private javax.swing.JPanel Header;
    private javax.swing.JComboBox<String> Instructor;
    private javax.swing.JButton LogoutButton;
    private javax.swing.JLabel Program;
    private javax.swing.JTextField ProgramField;
    private javax.swing.JLabel Seats;
    private javax.swing.JTextField SeatsField;
    private javax.swing.JPanel UpdateClassForm;
    private javax.swing.JPanel UpdateClassPanel;
    private javax.swing.JButton UpdateRecord;
    // End of variables declaration//GEN-END:variables
}
